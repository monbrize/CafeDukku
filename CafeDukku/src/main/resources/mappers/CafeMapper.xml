<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.caduk.mapper.CafeMapper">
	<insert id="createCafe" parameterType="CafeVO">
		insert into cafe(cafeid, idx, cafename, cafename2, inform, notice, sns_url, call, 
			postcode, loc1, loc2, mapcode1, mapcode2, status)
		values(cafeid_seq.nextval, #{idx}, #{cafename}, #{cafename2:VARCHAR},#{inform:VARCHAR}, #{notice:VARCHAR},
		 	#{sns_url:VARCHAR}, #{call:VARCHAR},#{postcode:VARCHAR}, #{loc1:VARCHAR}, #{loc2:VARCHAR},
		 	#{mapcode1:VARCHAR}, #{mapcode2:VARCHAR}, 'O')  
	</insert>
	<update id="updateOwner" parameterType="int">
		update member set roll='OWNER' where idx=#{val}
	</update>
	<select id="viewCafe" parameterType="int" resultType="CafeVO">
		select * from cafe where cafeid=#{val}
	</select>
	<select id="viewMyCafe" parameterType="int" resultType="CafeVO">
		select * from cafe where idx=#{val}
	</select>
	
	<update id="updateCafe" parameterType="CafeVO" >
		update cafe set cafename=#{cafename}, cafename2=#{cafename2:VARCHAR}, inform=#{inform:VARCHAR}, notice=#{notice:VARCHAR},
			sns_url=#{sns_url:VARCHAR}, call=#{call:VARCHAR}, postcode=#{postcode:VARCHAR}, loc1=#{loc1:VARCHAR}, loc2=#{loc2:VARCHAR}
			, mapcode1=#{mapcode1:VARCHAR}, mapcode2=#{mapcode2:VARCHAR}
			where cafeid=#{cafeid}
	</update>
	<select id="getOpenCafe" resultType="CafeVO">
		select * from (select * from cafe_search_list order by cafeid desc) 
		<![CDATA[
			where rownum < 6
		]]>
	</select>
	<select id="getSearchCafe"  parameterType="String" resultType="CafeVO">
		select * from cafe_search_list
		where cafename like '%'||#{val}||'%' or cafename2 like '%'||#{val}||'%'
	</select>
	<select id="getAllCafe" resultType="CafeVO">
		select * from cafe_search_list
	</select>
	<select id="getCafebyTag" parameterType="String" resultType="CafeVO">
		select * from cafe_search_list where cafeid in (select cafeid from cafe_tag where tag_name=#{val})
	</select>
	 
	<!-- eval -->
	<insert id="evalCafe" parameterType="EvaluationVO">
		insert into eval_cafe(rateid, cafeid, ordertime, idx, kindness, clean, mood, price, comfort, restroom)
		values(rateid_seq.nextval, #{cafeid}, sysdate, #{idx}, #{kindness}, #{clean}, #{mood},
		#{price}, #{comfort},#{restroom})
	</insert>
	<select id="getMySearchList" parameterType="int" resultType="CafeVO">
		select * from cafe_list where cafeid=#{val}
	</select>
	<!-- 내 카페의 종합점수 -->
	<select id="getMyTotalEval" parameterType="int" resultType="double">
		select round((sum(kindness+clean+mood+price+comfort)/(count(*)*5)),2) totalScore
		from eval_cafe where cafeid=#{val} group by cafeid
	</select>
	<!-- 내 카페의 다섯가지 항목의 점수 -->
	<select id="getMyEval" parameterType="int" resultType="CafeVO">
	select cafeid, round(avg(kindness),1) kindScore, round(avg(clean),1) cleanScore, 
    	round(avg(mood),1) moodScore, round(avg(price),1) priceScore, round(avg(comfort),1) comfortScore
		from eval_cafe where cafeid=#{val} group by cafeid 
	</select>	
	<select id="getTopKind" resultType="CafeVO">
		select c.*, a.kindnessScore  from cafe_search_list c, (
			select * 
			from (select cafeid, avg(kindness) kindnessScore from eval_cafe group by cafeid order by 2 desc)	
	<![CDATA[
			where rownum < 2
		]]>
		) a where c.cafeid=a.cafeid
	</select>
	<select id="getTopClean" resultType="CafeVO">
	select c.*, a.cleanScore  from cafe_search_list c, (
		select * 
		from (select cafeid, avg(clean) cleanScore from eval_cafe group by cafeid order by 2 desc)
	<![CDATA[
			where rownum < 2
		]]>
		) a where c.cafeid=a.cafeid
	</select>
	<select id="getTopMood" resultType="CafeVO">
	select c.*, a.moodScore  from cafe_search_list c, (
		select * 
		from (select cafeid, avg(mood) moodScore from eval_cafe group by cafeid order by 2 desc)
	<![CDATA[
			where rownum < 2
		]]>
		) a where c.cafeid=a.cafeid
	</select>
	<select id="getTopPrice" resultType="CafeVO">
		select c.*, a.priceScore  from cafe_search_list c, (
			select * 
			from (select cafeid, round(avg(price),1) priceScore from eval_cafe group by cafeid order by 2 desc)
	<![CDATA[
			where rownum < 2
		]]>
		) a where c.cafeid=a.cafeid
	</select>
	<select id="getTopComfort" resultType="CafeVO">
		select c.*, a.comfortScore  from cafe_search_list c, (
			select * 
			from (select cafeid, avg(comfort) comfortScore from eval_cafe group by cafeid order by 2 desc)
	<![CDATA[
			where rownum < 2
		]]>
		) a where c.cafeid=a.cafeid
	</select>
	<!-- 태그  -->
	<select id="cafeTag" resultType="CafeVO">
		select tag_type, tag_name from cafe_tag where cafeid=#{cafeid}
	</select>
	<insert id="addTag" parameterType="CafeVO">
		insert into cafe_tag(cafeid, tag_type, tag_name) values(#{cafeid}, #{tag_type}, #{tag_name})
	</insert>
	<delete id="removeTag" parameterType="CafeVO">
		delete from cafe_tag where cafeid=#{cafeid} and tag_type=#{tag_type} and tag_name=#{tag_name}
	</delete>
	<!-- 이미지-->
	<insert id="addImg" parameterType="CafeVO">
		insert into cafe_img values(imgid_seq.nextval, #{cafeid}, #{img_type}, #{img_name}, #{img_name_origin})
	</insert>
	<select id="cafeImg" resultType="CafeVO">
		select imgid, img_type, img_name, img_name_origin from cafe_img where cafeid=#{cafeid}
	</select>
	<select id="cafeImgbyId" resultType="CafeVO">
		select imgid, img_type, img_name, img_name_origin from cafe_img where imgid=#{val}
	</select>
	<delete id="removeImg">
		delete from cafe_img where imgid=#{val}
	</delete>
</mapper>